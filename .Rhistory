#Turn on the arules library
library(arules)
#Read in the data from the web
dat <- read.table("http://mathsci.ucd.ie/~brendan/data/Old/nltcs.txt", header = TRUE)
#First and last few rows
head(dat)
tail(dat)
#Sum of all people in study
sum(dat[,17])
sum(dat$COUNT)
#Count how many patterns occur in the data and call it M
M <- nrow(dat)
#Make a vector of numbers from 1 to M.
indices <- 1:M
#Extraxt the count for how often each pattern happens
counts <- dat$COUNT
#Construct a vector where the row number of each pattern is recorded
#the number of times the pattern arises in the data
rowindices <- rep(indices, counts)
#Now the matrix nltcsmat is created
nltcsmat <- dat[rowindices,]
#Remove the last two column because they are not needed
nltcsmat <- nltcsmat[,-(17:18)]
#Reordering the columns for readability
nltcsmat <- nltcsmat[,16:1]
#Data.frame coerced into a matrix
nltcsmat <- as.matrix(nltcsmat)
#Checking disabilitys 7 and 8
table(nltcsmat[,7])
table(nltcsmat[,8])
table(nltcsmat[,7], nltcsmat[,8])
apply(nltcsmat,2,table)
disabilitycount <- apply(nltcsmat,1,sum)
hist(disabilitycount)
summary(disabilitycount)
###############################################
#Data Converted to work in arules command
ntlcs <- as(nltcsmat,"transactions")
fit<-apriori(ntlcs,parameter=list(support=0.35,confidence=0.8))
fit<-sort(fit,by="support")
inspect(fit)
# Add P(A) and P(B) to the output
qual <- quality(fit)
PA <- qual$support/qual$confidence
PB <- qual$confidence/qual$lift
quality(fit) <- data.frame(qual,PA,PB)
inspect(fit)
fit<-apriori(ntlcs,parameter=list(support=0.3,confidence=0.9))
fit<-sort(fit,by="support")
inspect(fit)
qual <- quality(fit)
PA <- qual$support/qual$confidence
PB <- qual$confidence/qual$lift
quality(fit) <- data.frame(qual,PA,PB)
inspect(fit)
# Add the Lift bounds to the output
UB <- cbind(1/PA,1/PB)
UB <- apply(UB,1,min)
LB <- cbind(0,1/PA+1/PB-1/(PA*PB))
LB <- apply(LB,1,max)
quality(fit) <- data.frame(qual,PA,PB,LB,UB)
inspect(fit)
sLift <- (qual$lift-LB)/(UB-LB)
quality(fit) <- data.frame(qual, PA, PB, LB, UB, sLift)
fit   <- sort(fit, by="sLift")
inspect(fit)
supplb <- 0.3
conflb <- 0.9
LB2 <- cbind(0,1/PA+1/PB-1/(PA*PB),supplb/(PA*PB),conflb/PB)
LB2 <- apply(LB2,1,max)
sLift2 <- (qual$lift-LB2)/(UB-LB2)
quality(fit) <- data.frame(qual, PA, PB, LB2, UB, sLift2)
fit    <- sort(fit, by="sLift2")
inspect(fit)
install.packages("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR", version = "3.8")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
rm(list=ls(all=TRUE))       #Clear Environment
setwd("C:/Users/Callie Ann/Documents/ID299")     #Set the working directory
nodes <- read.csv("Dataset-NODES.csv", header = T, as.is = T)
links <- read.csv("Dataset-EDGES.csv", header = T, as.is = T)
probability <- read.table("RollProbabilities.txt", header = T)
head(nodes)
head(links)
head(probability)
nrow(nodes); length(unique(nodes$id))
nrow(unique(nodes[c("name.type")]))
nrow(links); nrow(unique(links[,c("from","to")]))
links <- links[order(links$from, links$to),]
library(igraph)
install.packages("igraph")
install.packages("igraph")
install.packages("arules")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib="C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
install.packages("arules")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib="C:/R-3.6.3/library")
install.packages(c("class", "foreign", "lattice", "nlme", "nnet", "survival"), lib = "C:/R-3.6.3/library")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr", lib="C:/R-3.6.3/library")
rm(list=ls(all=TRUE))       #Clear Environment
setwd("C:/Users/Callie Ann/Documents/ID299")     #Set the working directory
nodes <- read.csv("Dataset-NODES.csv", header = T, as.is = T)
links <- read.csv("Dataset-EDGES.csv", header = T, as.is = T)
probability <- read.table("RollProbabilities.txt", header = T)
head(nodes)
head(links)
head(probability)
nrow(nodes); length(unique(nodes$id))
nrow(unique(nodes[c("name.type")]))
nrow(links); nrow(unique(links[,c("from","to")]))
links <- links[order(links$from, links$to),]
install.packages("igraph")
library(igraph)
#install.packages("igraph")
library(igraph)
net <- graph_from_data_frame(d=links, vertices = nodes, directed = F)
colrs <- c("chocolate", "gold", "darkgreen", "dimgrey", "darkolivegreen1", "aliceblue", "burlywood")
V(net)$color <- colrs[V(net)$name.type]
plot(net, vertex.label=V(net)$name.value, vertex.shape="square")
library(dplyr)
install.packages("tidyverse", dependencies = TRUE)
#install.packages("tidyverse", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
library(dplyr)
roll = vertex_attr(net, "name.value", index = V(net))
roll <- as.data.frame(roll)
test = left_join(roll, probability, by = c("roll", "Roll"), match = "first")
install.packages("C:/Users/Callie Ann/AppData/Local/Temp/Rtmpy48BAM/downloaded_packages/glue_1.4.0.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/Callie Ann/AppData/Local/Temp/Rtmpy48BAM/downloaded_packages/glue_1.4.0.tar.gz", repos = NULL, type = "source", lib="C:/R-3.6.3/library")
#install.packages("tidyverse", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
mypath = .libPaths()
mypath <- c('C:/Library', mypath)
.libPaths(mypath)
#install.packages("tidyverse", dependencies = TRUE)
install.packages("dplyr", dependencies = TRUE)
